#
# Makefile:
#
# This makefile build two programs: stenosys, the stenography utility, and dictbuild, a dictionary building utility
# that converts a steno dictionary into a cpp source file for compilation into stenosys. stenosys is therefore
# dependent on dictbuild.
 
# make OUTPUT=X11 - a to build with X11 support
# make            - build with Pro Micro output support ('steno-in-the-middle')

CC	    	:= g++

STENOSYS	:= stenosys
DICTBUILD	:= dictbuild

SRCDIR		:= ./src
INCDIR		:= ./src
OBJDIR		:= ./obj
LOGDIR	    := ./log
EXEDIR		:= ./bin
DICTDIR		:= ./dictionary

SRCEXT		:= cpp
OBJEXT		:= o

INC			:= -I/usr/include
DICTIONARY	:= $(DICTDIR)/yttyx-dict.tsv
DICTHASHED	:= $(SRCDIR)/dictionary_i.cpp

# -O0       No optimisation
# -Wall		All warnings

ifeq ($(strip $(OUTPUT)),)
	CFLAGS		:= -O0 -Wall $(INCLUDE) -pipe
	LDLIBS  	:= -L/usr/lib -L/usr/local/lib -lpthread -lm
else
	CFLAGS		:= -O0 -Wall $(INCLUDE) -pipe -D X11
	LDLIBS  	:= -L/usr/lib -L/usr/local/lib -lpthread -lm -lX11 -lXtst
endif

# dictionary_i.cpp is generated by running dictbuild
STENOSYS_SOURCES := \
	cmdparser.cpp \
	cmdparserstate.cpp \
	config.cpp \
	dictionary_i.cpp \
	distribution.cpp \
	formatter.cpp \
	geminipr.cpp \
	kbdraw.cpp \
	kbdsteno.cpp \
	keyboard.cpp \
	log.cpp \
	miscellaneous.cpp \
	promicrooutput.cpp \
	serial.cpp \
	state.cpp \
	stenokeyboard.cpp \
	stenosys.cpp \
	stroke.cpp \
	strokefeed.cpp \
	strokes.cpp \
	symbols.cpp \
	textfile.cpp \
	translator.cpp \
	utf8.cpp \
	x11output.cpp

# Precede each source file with the source directory
STENOSYS_SOURCES_DIR := $(patsubst %,$(SRCDIR)/%,$(STENOSYS_SOURCES))
# Create a list of object files with their paths
STENOSYS_OBJECTS := $(patsubst $(SRCDIR)/%,$(OBJDIR)/%,$(STENOSYS_SOURCES_DIR:.$(SRCEXT)=.$(OBJEXT)))

DICTBUILD_SOURCES := \
	cmdparser.cpp \
	cmdparserstate.cpp \
	dictbuild.cpp \
	dictionary.cpp \
	distribution.cpp \
	log.cpp \
	miscellaneous.cpp \
	state.cpp \
	symbols.cpp \
	textfile.cpp \
	utf8.cpp

# Precede each source file with the source directory
DICTBUILD_SOURCES_DIR := $(patsubst %,$(SRCDIR)/%,$(DICTBUILD_SOURCES))
# Create a list of object files with their paths
DICTBUILD_OBJECTS := $(patsubst $(SRCDIR)/%,$(OBJDIR)/%,$(DICTBUILD_SOURCES_DIR:.$(SRCEXT)=.$(OBJEXT)))

.DEFAULT_GOAL := $(STENOSYS)

# Make the directories
directories:
	@mkdir -p $(EXEDIR)
	@mkdir -p $(OBJDIR)
	@mkdir -p $(LOGDIR)

# Clean only object files
clean:
	@$(RM) -rf $(OBJDIR)
	@$(RM) -rf $(EXEDIR)
	@$(RM) -rf $(LOGDIR)

# Link
$(DICTBUILD):	$(DICTBUILD_OBJECTS)
	@echo [link]
	@mkdir -p $(SRCDIR)
	$(CC) -o $(EXEDIR)/$(DICTBUILD) $(DICTBUILD_OBJECTS) $(LDLIBS)

# Build the dictionary hash table for steno lookup
$(DICTHASHED):	$(DICTBUILD) $(DICTIONARY)
	@$(EXEDIR)/dictbuild

$(STENOSYS):	directories $(STENOSYS_OBJECTS) $(DICTHASHED)
	@echo [link]
	@mkdir -p $(EXEDIR)
	$(CC) -o $(EXEDIR)/$(STENOSYS) $(STENOSYS_OBJECTS) $(LDLIBS)

# Compile
$(OBJDIR)/%.$(OBJEXT):	$(SRCDIR)/%.$(SRCEXT)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(INC) -c -o $@ $<

all:	$(DICTBUILD) $(STENOSYS)
	@echo ${X11}
